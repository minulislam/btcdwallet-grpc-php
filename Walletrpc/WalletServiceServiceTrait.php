<?php
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

namespace Walletrpc;

trait WalletServiceServiceTrait
{
    final public function getMethods()
    {
        return [
            "/walletrpc.WalletService/Ping" => "doPing",
            "/walletrpc.WalletService/Network" => "doNetwork",
            "/walletrpc.WalletService/AccountNumber" => "doAccountNumber",
            "/walletrpc.WalletService/Accounts" => "doAccounts",
            "/walletrpc.WalletService/Balance" => "doBalance",
            "/walletrpc.WalletService/GetTransactions" => "doGetTransactions",
            "/walletrpc.WalletService/TransactionNotifications" => "doTransactionNotifications",
            "/walletrpc.WalletService/SpentnessNotifications" => "doSpentnessNotifications",
            "/walletrpc.WalletService/AccountNotifications" => "doAccountNotifications",
            "/walletrpc.WalletService/ChangePassphrase" => "doChangePassphrase",
            "/walletrpc.WalletService/RenameAccount" => "doRenameAccount",
            "/walletrpc.WalletService/NextAccount" => "doNextAccount",
            "/walletrpc.WalletService/NextAddress" => "doNextAddress",
            "/walletrpc.WalletService/ImportPrivateKey" => "doImportPrivateKey",
            "/walletrpc.WalletService/FundTransaction" => "doFundTransaction",
            "/walletrpc.WalletService/SignTransaction" => "doSignTransaction",
            "/walletrpc.WalletService/PublishTransaction" => "doPublishTransaction",
        ];
    }

    final public function getLastErrno()
    {
        throw new \RuntimeException(__METHOD__.' can only called in client');
    }

    final public function getLastError()
    {
        throw new \RuntimeException(__METHOD__.' can only called in client');
    }

    final public function doPing(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\PingRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Ping($request);
    }
    final public function doNetwork(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\NetworkRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Network($request);
    }
    final public function doAccountNumber(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\AccountNumberRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->AccountNumber($request);
    }
    final public function doAccounts(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\AccountsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Accounts($request);
    }
    final public function doBalance(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\BalanceRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Balance($request);
    }
    final public function doGetTransactions(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\GetTransactionsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->GetTransactions($request);
    }
    final public function doTransactionNotifications(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\TransactionNotificationsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->TransactionNotifications($request);
    }
    final public function doSpentnessNotifications(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\SpentnessNotificationsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->SpentnessNotifications($request);
    }
    final public function doAccountNotifications(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\AccountNotificationsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->AccountNotifications($request);
    }
    final public function doChangePassphrase(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\ChangePassphraseRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ChangePassphrase($request);
    }
    final public function doRenameAccount(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\RenameAccountRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RenameAccount($request);
    }
    final public function doNextAccount(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\NextAccountRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->NextAccount($request);
    }
    final public function doNextAddress(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\NextAddressRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->NextAddress($request);
    }
    final public function doImportPrivateKey(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\ImportPrivateKeyRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ImportPrivateKey($request);
    }
    final public function doFundTransaction(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\FundTransactionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->FundTransaction($request);
    }
    final public function doSignTransaction(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\SignTransactionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->SignTransaction($request);
    }
    final public function doPublishTransaction(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\PublishTransactionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->PublishTransaction($request);
    }
}
