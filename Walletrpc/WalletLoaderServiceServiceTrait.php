<?php

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

namespace Walletrpc;

trait WalletLoaderServiceServiceTrait
{
    final public function getMethods()
    {
        return [
            '/walletrpc.WalletLoaderService/WalletExists'      => 'doWalletExists',
            '/walletrpc.WalletLoaderService/CreateWallet'      => 'doCreateWallet',
            '/walletrpc.WalletLoaderService/OpenWallet'        => 'doOpenWallet',
            '/walletrpc.WalletLoaderService/CloseWallet'       => 'doCloseWallet',
            '/walletrpc.WalletLoaderService/StartConsensusRpc' => 'doStartConsensusRpc',
        ];
    }

    final public function getLastErrno()
    {
        throw new \RuntimeException(__METHOD__.' can only called in client');
    }

    final public function getLastError()
    {
        throw new \RuntimeException(__METHOD__.' can only called in client');
    }

    final public function doWalletExists(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\WalletExistsRequest();

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->WalletExists($request);
    }

    final public function doCreateWallet(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\CreateWalletRequest();

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->CreateWallet($request);
    }

    final public function doOpenWallet(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\OpenWalletRequest();

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->OpenWallet($request);
    }

    final public function doCloseWallet(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\CloseWalletRequest();

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->CloseWallet($request);
    }

    final public function doStartConsensusRpc(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Walletrpc\StartConsensusRpcRequest();

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->StartConsensusRpc($request);
    }
}
