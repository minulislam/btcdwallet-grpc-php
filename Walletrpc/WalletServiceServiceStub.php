<?php

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

namespace Walletrpc;

final class WalletServiceServiceStub implements WalletServiceService
{
    use \Lv\Grpc\CurlStubTrait;

    /**
     * Queries.
     */
    public function Ping(\Walletrpc\PingRequest $request) : \Walletrpc\PingResponse
    {
        $reply = new \Walletrpc\PingResponse();

        $this->send('/walletrpc.WalletService/Ping', $request, $reply);

        return $reply;
    }

    public function Network(\Walletrpc\NetworkRequest $request) : \Walletrpc\NetworkResponse
    {
        $reply = new \Walletrpc\NetworkResponse();

        $this->send('/walletrpc.WalletService/Network', $request, $reply);

        return $reply;
    }

    public function AccountNumber(\Walletrpc\AccountNumberRequest $request) : \Walletrpc\AccountNumberResponse
    {
        $reply = new \Walletrpc\AccountNumberResponse();

        $this->send('/walletrpc.WalletService/AccountNumber', $request, $reply);

        return $reply;
    }

    public function Accounts(\Walletrpc\AccountsRequest $request) : \Walletrpc\AccountsResponse
    {
        $reply = new \Walletrpc\AccountsResponse();

        $this->send('/walletrpc.WalletService/Accounts', $request, $reply);

        return $reply;
    }

    public function Balance(\Walletrpc\BalanceRequest $request) : \Walletrpc\BalanceResponse
    {
        $reply = new \Walletrpc\BalanceResponse();

        $this->send('/walletrpc.WalletService/Balance', $request, $reply);

        return $reply;
    }

    public function GetTransactions(\Walletrpc\GetTransactionsRequest $request) : \Walletrpc\GetTransactionsResponse
    {
        $reply = new \Walletrpc\GetTransactionsResponse();

        $this->send('/walletrpc.WalletService/GetTransactions', $request, $reply);

        return $reply;
    }

    /**
     * Notifications.
     */
    public function TransactionNotifications(\Walletrpc\TransactionNotificationsRequest $request) : \Walletrpc\TransactionNotificationsResponse
    {
        $reply = new \Walletrpc\TransactionNotificationsResponse();

        $this->send('/walletrpc.WalletService/TransactionNotifications', $request, $reply);

        return $reply;
    }

    public function SpentnessNotifications(\Walletrpc\SpentnessNotificationsRequest $request) : \Walletrpc\SpentnessNotificationsResponse
    {
        $reply = new \Walletrpc\SpentnessNotificationsResponse();

        $this->send('/walletrpc.WalletService/SpentnessNotifications', $request, $reply);

        return $reply;
    }

    public function AccountNotifications(\Walletrpc\AccountNotificationsRequest $request) : \Walletrpc\AccountNotificationsResponse
    {
        $reply = new \Walletrpc\AccountNotificationsResponse();

        $this->send('/walletrpc.WalletService/AccountNotifications', $request, $reply);

        return $reply;
    }

    /**
     * Control.
     */
    public function ChangePassphrase(\Walletrpc\ChangePassphraseRequest $request) : \Walletrpc\ChangePassphraseResponse
    {
        $reply = new \Walletrpc\ChangePassphraseResponse();

        $this->send('/walletrpc.WalletService/ChangePassphrase', $request, $reply);

        return $reply;
    }

    public function RenameAccount(\Walletrpc\RenameAccountRequest $request) : \Walletrpc\RenameAccountResponse
    {
        $reply = new \Walletrpc\RenameAccountResponse();

        $this->send('/walletrpc.WalletService/RenameAccount', $request, $reply);

        return $reply;
    }

    public function NextAccount(\Walletrpc\NextAccountRequest $request) : \Walletrpc\NextAccountResponse
    {
        $reply = new \Walletrpc\NextAccountResponse();

        $this->send('/walletrpc.WalletService/NextAccount', $request, $reply);

        return $reply;
    }

    public function NextAddress(\Walletrpc\NextAddressRequest $request) : \Walletrpc\NextAddressResponse
    {
        $reply = new \Walletrpc\NextAddressResponse();

        $this->send('/walletrpc.WalletService/NextAddress', $request, $reply);

        return $reply;
    }

    public function ImportPrivateKey(\Walletrpc\ImportPrivateKeyRequest $request) : \Walletrpc\ImportPrivateKeyResponse
    {
        $reply = new \Walletrpc\ImportPrivateKeyResponse();

        $this->send('/walletrpc.WalletService/ImportPrivateKey', $request, $reply);

        return $reply;
    }

    public function FundTransaction(\Walletrpc\FundTransactionRequest $request) : \Walletrpc\FundTransactionResponse
    {
        $reply = new \Walletrpc\FundTransactionResponse();

        $this->send('/walletrpc.WalletService/FundTransaction', $request, $reply);

        return $reply;
    }

    public function SignTransaction(\Walletrpc\SignTransactionRequest $request) : \Walletrpc\SignTransactionResponse
    {
        $reply = new \Walletrpc\SignTransactionResponse();

        $this->send('/walletrpc.WalletService/SignTransaction', $request, $reply);

        return $reply;
    }

    public function PublishTransaction(\Walletrpc\PublishTransactionRequest $request) : \Walletrpc\PublishTransactionResponse
    {
        $reply = new \Walletrpc\PublishTransactionResponse();

        $this->send('/walletrpc.WalletService/PublishTransaction', $request, $reply);

        return $reply;
    }
}
